#include <iostream>
#include<bits/stdc++.h>

using namespace std;

struct Node{
    int val;
    Node* next;
};

typedef Node* HeadNode;

Node* addNodeBefore(Node* head , int val){
    Node* now = new Node;
    now->val = val;
    now->next = head;
    return now;
}

// Realizing no return by using reference
void addNodeBefore_2(HeadNode &head, int val){
	Node* now = new Node；
	now-> = val;
	now->next = head;
}

void addNode(Node* node , int val){
    Node* now = new Node;
    now->val = val;
    now->next = node->next;
    node->next = now;
}

void delNode(Node* node ){
    if (node->next != NULL)
    {
        Node* temp = node->next;  //  清空内存地址
        node->next = node->next->next;
        delete temp;
    }
}

void printAll(Node* node ){
    int len = 0;
    while (node != NULL)
    {
        len++;
        cout << node->val << "  ";
        node = node->next;
    }

    cout << endl;
    cout << "list len: " << len << endl;
}

Node* insertSort(int a[] , int len){
    if (len < 1)
    {
        return NULL;
    }

    Node* head = new Node;
    head->val = a[0];
    head->next = NULL;

    for (int i = 1; i < len; ++i)
    {
        int flag = 1;                             // every turn init it;
        if(a[i] < head->val)
        {
            head = addNodeBefore(head , a[i]);
            continue;
        }

        Node* cur = head;

        while (cur->next != NULL)  
        {
            if (a[i] < cur->next->val)
            {
                addNode(cur, a[i]);
                flag = 0;
                break;
            }
            cur = cur->next;
        }

        if (flag == 1)			// while i==1 , cur == NULL ,so flag == 1 ,then addNode after head because a[1] >=head->val
        {
            addNode(cur , a[i]);
        }
    }

    return head;
}

int main(){

    cout << "input the length of the array :" ;
    int nums;
    cin >> nums;
    int a[nums];
    cout << "input the elements of the array from head:" ;
    for (int i = 0; i < nums; ++i) {
        cin >> a[i];
    }

    Node* node = insertSort(a, nums);
    printAll(node);

}