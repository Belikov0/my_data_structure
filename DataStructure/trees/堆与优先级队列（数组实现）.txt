#include <iostream>
#include <cstring>
#include <queue>

using namespace std;

int count = 0;

void swap(int& a, int& b){
    int temp = a;
    a = b;
    b = temp;
}

void _sink(vector<int>& a, int father){ // if father is at the lowest, then it will be a heap with one node

    while (true){

        int left = father * 2 + 1;
        int right = father * 2 + 2;
        int child;
        int flag = 0;

        if (left < a.size() && a[father] < a[left] && a[right] < a[left]){
            child = left;
            flag = 1;
        }

        if(right < a.size() && a[father] < a[right] && a[left] < a[right]){
            child = right;
            flag = 1;
        }

        if (flag == 0)
            return;

        swap(a[father], a[child]);
        father = child;
    }

}

void _float(vector<int>& a, int i){
    int child = i;
    while(true){
        int father = (child-1)/2;

        if (father < 0 || a[father] >= a[child])
            return;

        swap(a[father], a[child]);

        child = father;
    }
}

void insert(int val, vector<int>& PQ){  // correct
    PQ.push_back(val);
    int index = PQ.size()-1;
    _float(PQ, index);
}

void delNode(int i,vector<int>& PQ){
    if (i >= PQ.size()-1)
        return;

    PQ[i] = PQ.back();
    PQ.pop_back();

    _sink(PQ, i);

}

void pop(vector<int>& PQ){
    delNode(0, PQ);
//    PQ[0] = PQ.back();
//    PQ.pop_back();
//    _sink(PQ, 0);
}

void make_heap_sink(vector<int>& PQ){
    int len = PQ.size();
    for (int i = len-1; i  >= 0; --i) {   // if using _sink function, then traversal from rear to front, or from down to up
        _sink(PQ, i);
    }
}

void make_heap_float(vector<int>& PQ){
    int len = PQ.size();
    for (int i = len/2-1 ; i < len; i++){
        _float(PQ, i);
    }
}

void print(vector<int> PQ){
    for (int i = 0; i < PQ.size(); ++i) {
        cout << PQ[i] << " ";
    }
}




int main(){
    vector<int> a;
    a.push_back(8);
    a.push_back(12);
    a.push_back(7);
    a.push_back(11);
    a.push_back(23);
    a.push_back(16);
    a.push_back(3);
    a.push_back(52);
    a.push_back(45);
    a.push_back(0);

    print(a); // print original array

    make_heap_sink(a);
//    make_heap_float(a);
    cout << endl;
    print(a);
    cout << endl;
    int len = a.size();
    for ( int i = 0; i < len; i++){
        cout << a[0] << " ";
        pop(a);
    }

    cout << endl;
    cout << a.size()<<endl;
//    print(a);


}