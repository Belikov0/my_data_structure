// 冒泡排序
//原理
void bubbleSort( int array[] , int n){

     int temp ;
     for (int i = n; i > 0; --i) {
         for (int j = 0; j < (i-1) ; ++j) {
             if (array[j] > array[j+1])
             {
                 temp = array[j] ;
                 array[j] = array[j+1];
                 array[j+1] = temp;
//                cout << array[j] << " " << array[j + 1] << endl;
             }
         }
     }
	 
//实例
//学生成绩与学号的排序

#include <iostream>
#include<bits/stdc++.h>

using namespace std;

void bubbleSort( int array[][2] ,  int n);

void bubbleSort2( int a[] , int b[] , int len);

int main(){

    int nums;
    cin >> nums;
    cout << nums << " students" << endl;
    int identity[nums];
    int grade[nums];

    for (int i = 0; i < nums; ++i)
    {
        cin >> identity[i];
    }
    for (int i = 0; i < nums; ++i)
    {
        cin >> grade[i];
    }

    bubbleSort2( identity , grade , nums);
    printf("\n");

    cout << "排名  " ;
    for (int i = 0; i < nums; ++i)
    {
        cout << i+1 << "   ";
    }
    printf("\n");

    cout << "学号  " ;
    for (int i = 0; i < nums; ++i)
    {
        cout << identity[i] << "   ";
    }
    printf("\n");

    cout << "成绩  ";
    for (int i = 0; i < nums; ++i)
    {
        cout << grade[i]  << "  ";
    }

}

void bubbleSort(int array[][2], int n ){    // 二维数组实现

    int temp1 ;
    int temp2 ;
    for (int i = 0 ; i < n  ; ++i)
    {
        for (int j = 0; j < (n-1) ; ++j)
        {
            if (array[j][1] < array[j+1][1])
            {
                temp1 = array[j][1] ;
                array[j][1] = array[j+1][1];
                array[j+1][1] = temp1;

                temp2 = array[j][0];
                array[j][0] = array[j+1][0];
                array[j+1][0] = temp2;
            }
        }
    }
}

void bubbleSort2(int a[] , int b[] , int len)  	// 两个一维数组实现
{
    int temp1 ;
    int temp2 ; 
    cout << len << endl;
    for (int i = len ; i > 0 ; --i)  
    {
        for (int j = 0; j < i ; ++j)
        {
            if (b[j] < b[j+1])
            {
                temp1 = b[j] ;
                b[j] = b[j+1];
                b[j+1] = temp1;

                temp2 = a[j];
                a[j] = a[j+1];
                a[j+1] = temp2;
            }
        }
    }
}