class Solution {
public:

// dp[j] 爬到第j层的方法数
    int climbStairs(int n) {
        int dp[100005];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= n; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }
        return dp[n];

        // 由于每次都可以爬1阶或者2阶梯，那么可以看作1，2无限取的完全背包
        // 那么可以写出如下代码

        // dp[0] = 1;
        // for (int j = 1; j <= n; j++){
        //     for (int i = 1; i <=2; i++){
        //         dp[j] += dp[j-i];
        //     }
        // }

        // 如果一次可以爬m阶，那么有：
        // for (int j = 1; j <= n; j++){
        //     for (int i = 1; i <= m; i++){
        //         dp[j] += dp[j-i];
        //     }
        // }
    }
};