/*
 * 564k 250ms
 */

#include <iostream>
#include <queue>
#include <vector>
#include <cstring>

using namespace std;
typedef pair<int, int> Grid;

int len;
int sx, sy;
int gx, gy;
int board[302][302];
int direction[8][2] = {
        {-2 ,1},
        {-1, 2},
        {1, 2},
        {2, 1},
        {2, -1},
        {1, -2},
        {-1, -2},
        {-2, -1}
};

bool inMap(int x, int y ){
    return (x >= 0 && y >= 0 && x < len && y < len);
}

int bfs(int ans = 0){
    if (sx == gx && sy == gy)
        return 0;

    queue<Grid> q;
    q.push(make_pair(sx, sy));

    int x, y;
    while (!q.empty()){
        Grid cur = q.front();
        q.pop();
        x = cur.first;
        y = cur.second;
        for (int i = 0; i < 8; i++){
            int dx = x + direction[i][0];
            int dy = y + direction[i][1];

            if (dx == gx && dy == gy){
                return board[x][y]+1;
            }

            if (inMap(dx, dy) && board[dx][dy] == 0){
                q.push(make_pair(dx, dy));
                board[dx][dy] = board[x][y]+1;
            }
        }
    }
    return 0;
}


int main(){

    int t;
    cin >> t;
    for (int i = 0; i < t; i++){
        cin >> len >> sx >> sy >> gx >> gy;
        memset(board, 0, sizeof(board));
        cout << bfs() << endl;
    }


}