class Solution {
public:
    // int partition(vector<int>& nums, int left, int right){ //
    //     int pivot = nums[left];

    //     while (left < right){
    //         while (left < right && nums[right] <= pivot)
    //             right--;
    //         nums[left] = nums[right];

    //         while (left < right && nums[left] >= pivot)
    //             left++;
    //         nums[right] = nums[left];
    //     }
    //     nums[left] = pivot;
    //     return left;
    // }

    // void quickSort(vector<int>& nums, int begin, int end, int k){
    //     if (end > begin){
    //         int mid = partition(nums, begin, end);
    //         if (mid == k-1){  // corresponding then return, quick sort is faster than below
    //             return;
    //         }
    //         quickSort(nums, begin, mid-1, k);
    //         quickSort(nums, mid+1, end, k);
    //     }
    // }

    int findKthLargest(vector<int>& nums, int k) {
        int len = nums.size();
        int store[len];
        for (int i = 0; i < len; i++){
            int maxN = -10000;
            int record;
            for (int j = i; j <len; j++){  // selection sort
                if (nums[j] > maxN){  
                    maxN = nums[j];
                    record = j;
                }
            }
            if (i+1 == k)
                return maxN;
            int temp = nums[record];
            nums[record] = nums[i];
            nums[i] = temp;
        }
    return 0;
    }
};